[33mcommit 7c666d29b10c7eb40d594a25f5fa3ba4dbea0cf2[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m, [m[1;33mtag: [m[1;33mv1.1.0[m[33m, [m[1;31morigin/main[m[33m)[m
Author: aqui <aquilesffoliveira@gmail.com>
Date:   Sun Dec 15 02:01:16 2024 -0300

    goblet 1.1 - extend keyword

[1mdiff --git a/examples/unfinished-todo/db/schema.sql b/examples/unfinished-todo/db/schema.sql[m
[1mnew file mode 100644[m
[1mindex 0000000..a59f095[m
[1m--- /dev/null[m
[1m+++ b/examples/unfinished-todo/db/schema.sql[m
[36m@@ -0,0 +1,16 @@[m
[32m+[m[32mcreate table users ([m
[32m+[m[32m    id integer primary key autoincrement,[m
[32m+[m[32m    username text not null,[m
[32m+[m[32m    password text not null[m
[32m+[m[32m);[m
[32m+[m
[32m+[m[32mcreate table todos ([m
[32m+[m[32m    id integer primary key autoincrement,[m
[32m+[m[32m    title text not null,[m
[32m+[m[32m    description text not null,[m
[32m+[m[32m    done boolean not null default false,[m
[32m+[m[32m    created_at timestamp not null default current_timestamp,[m
[32m+[m[32m    updated_at timestamp not null default current_timestamp,[m
[32m+[m[32m    user_id integer not null,[m
[32m+[m[32m    foreign key (user_id) references users(id)[m
[32m+[m[32m);[m
[1mdiff --git a/examples/unfinished-todo/db/todo.sqlite3 b/examples/unfinished-todo/db/todo.sqlite3[m
[1mnew file mode 100644[m
[1mindex 0000000..eec09e9[m
Binary files /dev/null and b/examples/unfinished-todo/db/todo.sqlite3 differ
[1mdiff --git a/examples/unfinished-todo/main.go b/examples/unfinished-todo/main.go[m
[1mnew file mode 100644[m
[1mindex 0000000..0cbe7cd[m
[1m--- /dev/null[m
[1m+++ b/examples/unfinished-todo/main.go[m
[36m@@ -0,0 +1,321 @@[m
[32m+[m[32mpackage main[m
[32m+[m
[32m+[m[32mimport ([m
[32m+[m	[32m"database/sql"[m
[32m+[m	[32m"encoding/json"[m
[32m+[m	[32m"fmt"[m
[32m+[m	[32m"net/http"[m
[32m+[m	[32m"strconv"[m
[32m+[m	[32m"strings"[m
[32m+[m
[32m+[m	[32m"golang.org/x/crypto/bcrypt"[m
[32m+[m
[32m+[m	[32m"github.com/aquiffoo/goblet"[m
[32m+[m	[32m_ "github.com/mattn/go-sqlite3"[m
[32m+[m[32m)[m
[32m+[m
[32m+[m[32mconst dbpath string = "./db/todo.sqlite3"[m
[32m+[m
[32m+[m[32mtype Todo struct {[m
[32m+[m	[32mID          int    `json:"id"`[m
[32m+[m	[32mTitle       string `json:"title"`[m
[32m+[m	[32mDescription string `json:"description"`[m
[32m+[m	[32mDone        bool   `json:"done"`[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtype APIResponse struct {[m
[32m+[m	[32mSuccess bool        `json:"success"`[m
[32m+[m	[32mMessage string      `json:"message,omitempty"`[m
[32m+[m	[32mTodos   []Todo      `json:"todos,omitempty"`[m
[32m+[m	[32mData    interface{} `json:"data,omitempty"`[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc getDB(dbpath string) *sql.DB {[m
[32m+[m	[32mdb, err := sql.Open("sqlite3", dbpath)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mpanic(err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m_, err = db.Exec(`[m
[32m+[m[32m        CREATE TABLE IF NOT EXISTS users ([m
[32m+[m[32m            id INTEGER PRIMARY KEY AUTOINCREMENT,[m
[32m+[m[32m            username TEXT UNIQUE NOT NULL,[m
[32m+[m[32m            password TEXT NOT NULL[m
[32m+[m[32m        );[m
[32m+[m[32m        CREATE TABLE IF NOT EXISTS todos ([m
[32m+[m[32m            id INTEGER PRIMARY KEY AUTOINCREMENT,[m
[32m+[m[32m            title TEXT NOT NULL,[m
[32m+[m[32m            description TEXT,[m
[32m+[m[32m            done INTEGER DEFAULT 0,[m
[32m+[m[32m            user_id INTEGER,[m
[32m+[m[32m            FOREIGN KEY (user_id) REFERENCES users(id)[m
[32m+[m[32m        );[m
[32m+[m[32m    `)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mpanic(err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn db[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvar db *sql.DB = getDB(dbpath)[m
[32m+[m
[32m+[m[32mfunc login(username string, password string) (bool, string) {[m
[32m+[m	[32mvar storedHash string[m
[32m+[m	[32mvar userID int[m
[32m+[m	[32merr := db.QueryRow("SELECT id, password FROM users WHERE username = ?", username).Scan(&userID, &storedHash)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mif err == sql.ErrNoRows {[m
[32m+[m			[32mreturn false, ""[m
[32m+[m		[32m}[m
[32m+[m		[32mfmt.Println("Error during login query:", err)[m
[32m+[m		[32mreturn false, ""[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32merr = bcrypt.CompareHashAndPassword([]byte(storedHash), []byte(password))[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn false, ""[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn true, strconv.Itoa(userID)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc register(username string, password string) (bool, error) {[m
[32m+[m	[32mhashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn false, fmt.Errorf("error hashing password: %w", err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32m_, err = db.Exec("INSERT INTO users (username, password) VALUES (?, ?)", username, hashedPassword)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mif strings.Contains(err.Error(), "UNIQUE constraint failed") {[m
[32m+[m			[32mreturn false, fmt.Errorf("username already exists")[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn false, fmt.Errorf("error registering user: %w", err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn true, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc addTodo(title string, description string, userID int) (bool, error) {[m
[32m+[m	[32m_, err := db.Exec("INSERT INTO todos (title, description, user_id) VALUES (?, ?, ?)", title, description, userID)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn false, fmt.Errorf("error adding todo: %w", err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn true, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc getTodos(userID int) ([]Todo, error) {[m
[32m+[m	[32mrows, err := db.Query("SELECT id, title, description, done FROM todos WHERE user_id = ?", userID)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn nil, fmt.Errorf("error getting todos: %w", err)[m
[32m+[m	[32m}[m
[32m+[m	[32mdefer rows.Close()[m
[32m+[m
[32m+[m	[32mvar todos []Todo[m
[32m+[m	[32mfor rows.Next() {[m
[32m+[m		[32mvar todo Todo[m
[32m+[m		[32merr := rows.Scan(&todo.ID, &todo.Title, &todo.Description, &todo.Done)[m
[32m+[m		[32mif err != nil {[m
[32m+[m			[32mreturn nil, fmt.Errorf("error scanning todo: %w", err)[m
[32m+[m		[32m}[m
[32m+[m		[32mtodos = append(todos, todo)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mif err = rows.Err(); err != nil {[m
[32m+[m		[32mreturn nil, fmt.Errorf("error iterating over todos: %w", err)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn todos, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc main() {[m
[32m+[m	[32mapp := goblet.New(true)[m
[32m+[m
[32m+[m	[32mapp.Handle("/", func(w http.ResponseWriter, r *http.Request) {[m
[32m+[m		[32mdata := map[string]interface{}{[m
[32m+[m			[32m"title":   "Goblet Todo - Home",[m
[32m+[m			[32m"lang":    "en",[m
[32m+[m			[32m"charset": "utf-8",[m
[32m+[m			[32m"success": false,[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32muserID, loggedIn := getLoggedInUserID(r)[m
[32m+[m		[32mif loggedIn {[m
[32m+[m			[32mtodos, err := getTodos(userID)[m
[32m+[m			[32mif err != nil {[m
[32m+[m				[32mdata["error"] = "Failed to load todos"[m
[32m+[m			[32m} else {[m
[32m+[m				[32mdata["success"] = true[m
[32m+[m				[32mdata["username"] = getUserName(userID)[m
[32m+[m				[32mdata["todos"] = todos[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mapp.Render(w, "index.html", data)[m
[32m+[m	[32m})[m
[32m+[m
[32m+[m	[32mapp.Handle("/login", func(w http.ResponseWriter, r *http.Request) {[m
[32m+[m		[32mdata := map[string]interface{}{[m
[32m+[m			[32m"title":   "Goblet Todo - Login",[m
[32m+[m			[32m"lang":    "en",[m
[32m+[m			[32m"charset": "utf-8",[m
[32m+[m		[32m}[m
[32m+[m		[32mapp.Render(w, "login.html", data)[m
[32m+[m	[32m})[m
[32m+[m
[32m+[m	[32mapp.Handle("/register", func(w http.ResponseWriter, r *http.Request) {[m
[32m+[m		[32mdata := map[string]interface{}{[m
[32m+[m			[32m"title":   "Goblet Todo - Register",[m
[32m+[m			[32m"lang":    "en",[m
[32m+[m			[32m"charset": "utf-8",[m
[32m+[m		[32m}[m
[32m+[m		[32mapp.Render(w, "register.html", data)[m
[32m+[m	[32m})[m
[32m+[m
[32m+[m	[32mapp.Handle("/api/login", func(w http.ResponseWriter, r *http.Request) {[m
[32m+[m		[32musername := r.FormValue("username")[m
[32m+[m		[32mpassword := r.FormValue("password")[m
[32m+[m
[32m+[m		[32msuccess, userID := login(username, password)[m
[32m+[m
[32m+[m		[32mvar response APIResponse[m
[32m+[m		[32mif success {[m
[32m+[m			[32msetSessionCookie(w, userID)[m
[32m+[m
[32m+[m			[32mresponse = APIResponse{[m
[32m+[m				[32mSuccess: true,[m
[32m+[m				[32mMessage: "Login successful",[m
[32m+[m				[32mData: map[string]string{[m
[32m+[m					[32m"user_id": userID,[m
[32m+[m				[32m},[m
[32m+[m			[32m}[m
[32m+[m		[32m} else {[m
[32m+[m			[32mresponse = APIResponse{[m
[32m+[m				[32mSuccess: false,[m
[32m+[m				[32mMessage: "Invalid username or password",[m
[32m+[m			[32m}[m
[32m+[m			[32mw.WriteHeader(http.StatusUnauthorized)[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mw.Header().Set("Content-Type", "application/json")[m
[32m+[m		[32mjson.NewEncoder(w).Encode(response)[m
[32m+[m	[32m})[m
[32m+[m
[32m+[m	[32mapp.Handle("/api/register", func(w http.ResponseWriter, r *http.Request) {[m
[32m+[m		[32musername := r.FormValue("username")[m
[32m+[m		[32mpassword := r.FormValue("password")[m
[32m+[m
[32m+[m		[32msuccess, err := register(username, password)[m
[32m+[m
[32m+[m		[32mvar response APIResponse[m
[32m+[m		[32mif success {[m
[32m+[m			[32mresponse = APIResponse{[m
[32m+[m				[32mSuccess: true,[m
[32m+[m				[32mMessage: "Registration successful",[m
[32m+[m			[32m}[m
[32m+[m		[32m} else {[m
[32m+[m			[32mresponse = APIResponse{[m
[32m+[m				[32mSuccess: false,[m
[32m+[m				[32mMessage: err.Error(),[m
[32m+[m			[32m}[m
[32m+[m			[32mw.WriteHeader(http.StatusBadRequest)[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mw.Header().Set("Content-Type", "application/json")[m
[32m+[m		[32mjson.NewEncoder(w).Encode(response)[m
[32m+[m	[32m})[m
[32m+[m
[32m+[m	[32mapp.Handle("/api/todos", func(w http.ResponseWriter, r *http.Request) {[m
[32m+[m		[32muserIDStr := r.URL.Query().Get("user_id")[m
[32m+[m		[32muserID, err := strconv.Atoi(userIDStr)[m
[32m+[m		[32mif err != nil {[m
[32m+[m			[32mhttp.Error(w, "Invalid user ID", http.StatusBadRequest)[m
[32m+[m			[32mreturn[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mtodos, err := getTodos(userID)[m
[32m+[m		[32mif err != nil {[m
[32m+[m			[32mhttp.Error(w, err.Error(), http.StatusInternalServerError)[m
[32m+[m			[32mreturn[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mresponse := APIResponse{[m
[32m+[m			[32mSuccess: true,[m
[32m+[m			[32mTodos:   todos,[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mw.Header().Set("Content-Type", "application/json")[m
[32m+[m		[32mjson.NewEncoder(w).Encode(response)[m
[32m+[m	[32m})[m
[32m+[m
[32m+[m	[32mapp.Handle("/api/add_todo", func(w http.ResponseWriter, r *http.Request) {[m
[32m+[m		[32mr.ParseForm()[m
[32m+[m		[32mtitle := r.FormValue("title")[m
[32m+[m		[32mdescription := r.FormValue("description")[m
[32m+[m		[32muserIDStr := r.FormValue("user_id")[m
[32m+[m
[32m+[m		[32muserID, err := strconv.Atoi(userIDStr)[m
[32m+[m		[32mif err != nil {[m
[32m+[m			[32mhttp.Error(w, "Invalid user ID", http.StatusBadRequest)[m
[32m+[m			[32mreturn[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32msuccess, err := addTodo(title, description, userID)[m
[32m+[m		[32mif err != nil {[m
[32m+[m			[32mhttp.Error(w, err.Error(), http.StatusInternalServerError)[m
[32m+[m			[32mreturn[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mresponse := APIResponse{[m
[32m+[m			[32mSuccess: success,[m
[32m+[m			[32mMessage: "Todo added successfully",[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mw.Header().Set("Content-Type", "application/json")[m
[32m+[m		[32mjson.NewEncoder(w).Encode(response)[m
[32m+[m	[32m})[m
[32m+[m
[32m+[m	[32merr := app.Serve("6969")[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mpanic(err)[m
[32m+[m	[32m}[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc setSessionCookie(w http.ResponseWriter, userID string) {[m
[32m+[m	[32msessionValue := userID[m
[32m+[m
[32m+[m	[32mhttp.SetCookie(w, &http.Cookie{[m
[32m+[m		[32mName:     "session_id",[m
[32m+[m		[32mValue:    sessionValue,[m
[32m+[m		[32mHttpOnly: true,[m
[32m+[m		[32mSecure:   false,[m
[32m+[m		[32mPath:     "/",[m
[32m+[m	[32m})[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc getLoggedInUserID(r *http.Request) (int, bool) {[m
[32m+[m	[32mcookie, err := r.Cookie("session_id")[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn 0, false[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32muserIDStr := cookie.Value[m
[32m+[m	[32muserID, err := strconv.Atoi(userIDStr)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn 0, false[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn userID, true[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc getUserName(userID int) string {[m
[32m+[m	[32mvar username string[m
[32m+[m	[32merr := db.QueryRow("SELECT username FROM users WHERE id = ?", userID).Scan(&username)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mfmt.Println("Error getting username:", err)[m
[32m+[m		[32mreturn ""[m
[32m+[m	[32m}[m
[32m+[m	[32mreturn username[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/examples/unfinished-todo/static/script.js b/examples/unfinished-todo/static/script.js[m
[1mnew file mode 100644[m
[1mindex 0000000..c6144be[m
[1m--- /dev/null[m
[1m+++ b/examples/unfinished-todo/static/script.js[m
[36m@@ -0,0 +1,56 @@[m
[32m+[m[32mconst loginForm = document.getElementById('login-form');[m
[32m+[m[32mconst registerForm = document.getElementById('register-form');[m
[32m+[m[32mconst loginMessage = document.getElementById('login-message');[m
[32m+[m[32mconst registerMessage = document.getElementById('register-message');[m
[32m+[m
[32m+[m[32mif (loginForm) {[m
[32m+[m[32m    loginForm.addEventListener('submit', async (event) => {[m
[32m+[m[32m        event.preventDefault();[m
[32m+[m
[32m+[m[32m        const username = loginForm.username.value;[m
[32m+[m[32m        const password = loginForm.password.value;[m
[32m+[m
[32m+[m[32m        const response = await fetch('/api/login', {[m
[32m+[m[32m            method: 'POST',[m
[32m+[m[32m            headers: {[m
[32m+[m[32m                'Content-Type': 'application/x-www-form-urlencoded',[m
[32m+[m[32m            },[m
[32m+[m[32m            body: new URLSearchParams({ username, password }),[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        const data = await response.json();[m
[32m+[m
[32m+[m[32m        if (data.success) {[m
[32m+[m[32m            loginMessage.textContent = data.message;[m
[32m+[m[32m            window.location.href = '/';[m
[32m+[m[32m        } else {[m
[32m+[m[32m            loginMessage.textContent = data.message;[m
[32m+[m[32m        }[m
[32m+[m[32m    });[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mif (registerForm) {[m
[32m+[m[32m    registerForm.addEventListener('submit', async (event) => {[m
[32m+[m[32m        event.preventDefault();[m
[32m+[m
[32m+[m[32m        const username = registerForm.username.value;[m
[32m+[m[32m        const password = registerForm.password.value;[m
[32m+[m
[32m+[m[32m        const response = await fetch('/api/register', {[m
[32m+[m[32m            method: 'POST',[m
[32m+[m[32m            headers: {[m
[32m+[m[32m                'Content-Type': 'application/x-www-form-urlencoded',[m
[32m+[m[32m            },[m
[32m+[m[32m            body: new URLSearchParams({ username, password }),[m
[32m+[m[32m        });[m
[32m+[m
[32m+[m[32m        const data = await response.json();[m
[32m+[m
[32m+[m[32m        if (data.success) {[m
[32m+[m[32m            registerMessage.textContent = data.message;[m
[32m+[m[32m            window.location.href = '/login';[m
[32m+[m[32m        } else {[m
[32m+[m[32m            registerMessage.textContent = data.message;[m
[32m+[m[32m        }[m
[32m+[m[32m    });[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/examples/unfinished-todo/static/styles.css b/examples/unfinished-todo/static/styles.css[m
[1mnew file mode 100644[m
[1mindex 0000000..a4adf7c[m
[1m--- /dev/null[m
[1m+++ b/examples/unfinished-todo/static/styles.css[m
[36m@@ -0,0 +1,34 @@[m
[32m+[m[32mbody {[m
[32m+[m[32m    font-family: sans-serif;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mnav {[m
[32m+[m[32m    background-color: #eee;[m
[32m+[m[32m    padding: 10px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mnav a {[m
[32m+[m[32m    margin-right: 15px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mmain {[m
[32m+[m[32m    padding: 20px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mform label {[m
[32m+[m[32m    display: block;[m
[32m+[m[32m    margin-bottom: 5px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mform input[type="text"],[m
[32m+[m[32mform input[type="password"] {[m
[32m+[m[32m    width: 200px;[m
[32m+[m[32m    padding: 5px;[m
[32m+[m[32m    margin-bottom: 10px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#todo-list li {[m
[32m+[m[32m    border: 1px solid #ccc;[m
[32m+[m[32m    padding: 10px;[m
[32m+[m[32m    margin-bottom: 10px;[m
[32m+[m[32m}[m
\ No newline at end of file[m
[1mdiff --git a/examples/unfinished-todo/templates/base.html b/examples/unfinished-todo/templates/base.html[m
[1mnew file mode 100644[m
[1mindex 0000000..c9e3563[m
[1m--- /dev/null[m
[1m+++ b/examples/unfinished-todo/templates/base.html[m
[36m@@ -0,0 +1,27 @@[m
[32m+[m[32m<!DOCTYPE html>[m
[32m+[m[32m<html lang="{{ .lang }}">[m
[32m+[m[32m<head>[m
[32m+[m[32m    <meta charset="{{ .charset }}">[m
[32m+[m[32m    <meta http-equiv="X-UA-Compatible" content="IE=edge">[m
[32m+[m[32m    <meta name="viewport" content="width=device-width, initial-scale=1.0">[m
[32m+[m[32m    <title>{{ block "title" . }}{{ .title }}{{ end }}</title>[m
[32m+[m[32m    <link rel="stylesheet" href="{{ url_for "static/styles.css" }}">[m
[32m+[m[32m</head>[m
[32m+[m[32m<body>[m
[32m+[m[32m    <header>[m
[32m+[m[32m        <nav>[m
[32m+[m[32m            <a href="{{ url_for "" }}">Home</a>[m
[32m+[m[32m            <a href="{{ url_for "login" }}">Login</a>[m
[32m+[m[32m            <a href="{{ url_for "register" }}">Register</a>[m
[32m+[m[32m        </nav>[m
[32m+[m[32m    </header>[m
[32m+[m[32m    <main>[m
[32m+[m[32m        {{ block "main" . }}[m
[32m+[m[32m        {{ end }}[m
[32m+[m[32m    </main>[m
[32m+[m[32m    <footer align="center">[m
[32m+[m[32m        <p>Made with <a href="https://github.com/aquiffoo/goblet">Goblet</a></p>[m
[32m+[m[32m    </footer>[m
[32m+[m[32m    <script src="{{ url_for "static/script.js" }}"></script>[m
[32m+[m[32m</body>[m
[32m+[m[32m</html>[m
\ No newline at end of file[m
[1mdiff --git a/examples/unfinished-todo/templates/index.html b/examples/unfinished-todo/templates/index.html[m
[1mnew file mode 100644[m
[1mindex 0000000..c0d4834[m
[1m--- /dev/null[m
[1m+++ b/examples/unfinished-todo/templates/index.html[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32m{{ extends "base.html" }}[m
[32m+[m[32m<title>{{ .title }}</title>[m
[32m+[m[32m{{ block "main" }}[m
[32m+[m[32m    <h1>Welcome to Goblet Todo</h1>[m
[32m+[m[32m    {{ if .success }}[m
[32m+[m[32m        <p>You are logged in as {{ .username }}.</p>[m
[32m+[m[32m        <p>Click <a href="{{ url_for "logout" }}">here</a> to logout.</p>[m
[32m+[m[32m    {{ else }}[m
[32m+[m[32m        <p>You are not logged in.</p>[m
[32m+[m[32m        <p>Click <a href="{{ url_for "login" }}">here</a> to login.</p>[m
[32m+[m[32m        <p>Click <a href="{{ url_for "register" }}">here</a> to register.</p>[m
[32m+[m[32m    {{ end }}[m
[32m+[m[32m{{ end }}[m
\ No newline at end of file[m
[1mdiff --git a/examples/unfinished-todo/templates/json.html b/examples/unfinished-todo/templates/json.html[m
[1mnew file mode 100644[m
[1mindex 0000000..e69de29[m
[1mdiff --git a/examples/unfinished-todo/templates/login.html b/examples/unfinished-todo/templates/login.html[m
[1mnew file mode 100644[m
[1mindex 0000000..0a9d2df[m
[1m--- /dev/null[m
[1m+++ b/examples/unfinished-todo/templates/login.html[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32m{{ extends "base.html" }}[m
[32m+[m[32m{{define "title"}}{{ .title }}{{end}}[m
[32m+[m[32m{{define "main"}}[m
[32m+[m[32m    <h1>Login</h1>[m
[32m+[m[32m    <form id="login-form">[m
[32m+[m[32m        <label for="username">Username:</label><br>[m
[32m+[m[32m        <input type="text" id="username" name="username" required><br>[m
[32m+[m[32m        <label for="password">Password:</label><br>[m
[32m+[m[32m        <input type="password" id="password" name="password" required><br><br>[m
[32m+[m[32m        <button type="submit">Login</button>[m
[32m+[m[32m    </form>[m
[32m+[m[32m    <div id="login-message"></div>[m
[32m+[m[32m{{end}}[m
\ No newline at end of file[m
[1mdiff --git a/examples/unfinished-todo/templates/register.html b/examples/unfinished-todo/templates/register.html[m
[1mnew file mode 100644[m
[1mindex 0000000..688cbca[m
[1m--- /dev/null[m
[1m+++ b/examples/unfinished-todo/templates/register.html[m
[36m@@ -0,0 +1,13 @@[m
[32m+[m[32m{{ extends "base.html" }}[m
[32m+[m[32m{{define "title"}}{{ .title }}{{end}}[m
[32m+[m[32m{{define "main"}}[m
[32m+[m[32m    <h1>Register</h1>[m
[32m+[m[32m    <form id="register-form">[m
[32m+[m[32m        <label for="username">Username:</label><br>[m
[32m+[m[32m        <input type="text" id="username" name="username" required><br>[m
[32m+[m[32m        <label for="password">Password:</label><br>[m
[32m+[m[32m        <input type="password" id="password" name="password" required><br><br>[m
[32m+[m[32m        <button type="submit">Register</button>[m
[32m+[m[32m    </form>[m
[32m+[m[32m    <div id="register-message"></div>[m
[32m+[m[32m{{end}}[m
\ No newline at end of file[m
[1mdiff --git a/go.mod b/go.mod[m
[1mindex fe34f82..0919b34 100644[m
[1m--- a/go.mod[m
[1m+++ b/go.mod[m
[36m@@ -4,5 +4,7 @@[m [mgo 1.23.2[m
 [m
 require ([m
 	github.com/fsnotify/fsnotify v1.8.0 // indirect[m
[32m+[m	[32mgithub.com/mattn/go-sqlite3 v1.14.24 // indirect[m
[32m+[m	[32mgolang.org/x/crypto v0.31.0 // indirect[m
 	golang.org/x/sys v0.28.0 // indirect[m
 )[m
[1mdiff --git a/go.sum b/go.sum[m
[1mindex 56c2cc9..297ecaf 100644[m
[1m--- a/go.sum[m
[1m+++ b/go.sum[m
[36m@@ -1,4 +1,8 @@[m
 github.com/fsnotify/fsnotify v1.8.0 h1:dAwr6QBTBZIkG8roQaJjGof0pp0EeF+tNV7YBP3F/8M=[m
 github.com/fsnotify/fsnotify v1.8.0/go.mod h1:8jBTzvmWwFyi3Pb8djgCCO5IBqzKJ/Jwo8TRcHyHii0=[m
[32m+[m[32mgithub.com/mattn/go-sqlite3 v1.14.24 h1:tpSp2G2KyMnnQu99ngJ47EIkWVmliIizyZBfPrBWDRM=[m
[32m+[m[32mgithub.com/mattn/go-sqlite3 v1.14.24/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=[m
[32m+[m[32mgolang.org/x/crypto v0.31.0 h1:ihbySMvVjLAeSH1IbfcRTkD/iNscyz8rGzjF/E5hV6U=[m
[32m+[m[32mgolang.org/x/crypto v0.31.0/go.mod h1:kDsLvtWBEx7MV9tJOj9bnXsPbxwJQ6csT/x4KIN4Ssk=[m
 golang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=[m
 golang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=[m
[1mdiff --git a/main.go b/main.go[m
[1mindex 9bbcf6f..69e94e1 100644[m
[1m--- a/main.go[m
[1m+++ b/main.go[m
[36m@@ -58,7 +58,14 @@[m [mfunc (g *Goblet) Serve(port string) error {[m
 }[m
 [m
 func (g *Goblet) Render(w http.ResponseWriter, name string, data interface{}) error {[m
[31m-	err := g.templates.ExecuteTemplate(w, name, data)[m
[32m+[m	[32mprocTpl, err := Extends(g.templates, name, data)[m
[32m+[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mhttp.Error(w, err.Error(), http.StatusInternalServerError)[m
[32m+[m		[32mreturn err[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32merr = procTpl.Execute(w, data)[m
 [m
 	if err != nil {[m
 		http.Error(w, err.Error(), http.StatusInternalServerError)[m
[36m@@ -74,7 +81,7 @@[m [mfunc (g *Goblet) watch() {[m
 		fmt.Println("ERR: Failed to create watcher:", err)[m
 		return[m
 	}[m
[31m-	defer watcher.Close() [m
[32m+[m	[32mdefer watcher.Close()[m
 [m
 	watchPaths := []string{"."}[m
 	excludedDirs := map[string]bool{".git": true, "bin": true, "node_modules": true}[m
[36m@@ -125,7 +132,7 @@[m [mfunc (g *Goblet) watch() {[m
 [m
 				fmt.Printf("Change detected in %s\n", event.Name)[m
 [m
[31m-				restartTimer.Reset(1 * time.Second)[m
[32m+[m				[32mrestartTimer.Reset(10 * time.Millisecond)[m
 			}[m
 [m
 		case err, ok := <- watcher.Errors:[m
[1mdiff --git a/utils.go b/utils.go[m
[1mindex 2941783..9fbf8ea 100644[m
[1m--- a/utils.go[m
[1m+++ b/utils.go[m
[36m@@ -1,7 +1,123 @@[m
 package goblet[m
 [m
[31m-import "fmt"[m
[32m+[m[32mimport ([m
[32m+[m	[32m"fmt"[m
[32m+[m	[32m"html/template"[m
[32m+[m	[32m"io/fs"[m
[32m+[m	[32m"io/ioutil"[m
[32m+[m	[32m"path/filepath"[m
[32m+[m	[32m"regexp"[m
[32m+[m	[32m"strings"[m
[32m+[m[32m)[m
 [m
 func UrlFor(endpoint string) string {[m
 	return fmt.Sprintf("/%s", endpoint)[m
 }[m
[32m+[m
[32m+[m[32m// regex searches for: {{ extends "yada yada yada" }}[m
[32m+[m[32mvar extendsRegex = regexp.MustCompile(`\{\{\s*extends\s*\"(.*?)\"\}\}`)[m
[32m+[m
[32m+[m[32mfunc parseTemplate(baseTemplate, templateName string, templates map[string]string) (*template.Template, error) {[m
[32m+[m	[32mfuncMap := template.FuncMap{[m
[32m+[m		[32m"url_for": UrlFor,[m
[32m+[m	[32m}[m
[32m+[m	[32mtmpl := template.New(templateName).Funcs(funcMap)[m
[32m+[m
[32m+[m	[32mvar processTemplate func(name string) (*template.Template, error)[m
[32m+[m	[32mprocessTemplate = func(name string) (*template.Template, error) {[m
[32m+[m		[32mcontent, ok := templates[name][m
[32m+[m		[32mif !ok {[m
[32m+[m			[32mreturn nil, fmt.Errorf("template %s not found", name)[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mmatch := extendsRegex.FindStringSubmatch(content)[m
[32m+[m		[32mif match != nil {[m
[32m+[m			[32mparentName := match[1][m
[32m+[m			[32mparentContent, ok := templates[parentName][m
[32m+[m			[32mif !ok {[m
[32m+[m				[32mreturn nil, fmt.Errorf("parent template %s not found", parentName)[m
[32m+[m			[32m}[m
[32m+[m
[32m+[m			[32mcontent = extendsRegex.ReplaceAllString(content, "")[m
[32m+[m			[32mparentContent = replaceBlocks(parentContent, content)[m
[32m+[m
[32m+[m			[32mvar err error[m
[32m+[m			[32mtmpl, err = tmpl.Parse(parentContent)[m
[32m+[m			[32mif err != nil {[m
[32m+[m				[32mreturn nil, fmt.Errorf("error parsing parent template %s: %v", parentName, err)[m
[32m+[m			[32m}[m
[32m+[m		[32m} else {[m
[32m+[m			[32mvar err error[m
[32m+[m			[32mtmpl, err = tmpl.Parse(content)[m
[32m+[m			[32mif err != nil {[m
[32m+[m				[32mreturn nil, fmt.Errorf("error parsing template %s: %v", name, err)[m
[32m+[m			[32m}[m
[32m+[m		[32m}[m
[32m+[m
[32m+[m		[32mreturn tmpl, nil[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn processTemplate(templateName)[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc replaceBlocks(parentContent, childContent string) string {[m
[32m+[m	[32mchildBlocks := extractBlocks(childContent)[m
[32m+[m
[32m+[m	[32mfor blockName, blockContent := range childBlocks {[m
[32m+[m		[32mparentContent = replaceBlockContent(parentContent, blockName, blockContent)[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn parentContent[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc extractBlocks(content string) map[string]string {[m
[32m+[m	[32mre := regexp.MustCompile(`\{\{\s*block\s+\"(\w+)\"\s*\}\}(.*?)\{\{\s*end\s*\}\}`)[m
[32m+[m	[32mmatches := re.FindAllStringSubmatch(content, -1)[m
[32m+[m
[32m+[m	[32mblocks := make(map[string]string)[m
[32m+[m	[32mfor _, match := range matches {[m
[32m+[m		[32mblockName := match[1][m
[32m+[m		[32mblockContent := match[2][m
[32m+[m		[32mblocks[blockName] = blockContent[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn blocks[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc replaceBlockContent(content, blockName, blockContent string) string {[m
[32m+[m	[32mre := regexp.MustCompile(fmt.Sprintf(`\{\{\s*block\s+\"%s\"\s*\.\s*\}\}(.*?)\{\{\s*end\s*\}\}`, blockName))[m
[32m+[m	[32mreturn re.ReplaceAllString(content, fmt.Sprintf("{{block \"%s\" .}}%s{{end}}", blockName, blockContent))[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc Extends(tpl *template.Template, name string, data interface{}) (*template.Template, error) {[m
[32m+[m	[32mtemplates, err := loadTemplateFiles("templates")[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn nil, err[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mfinalTmpl, err := parseTemplate("base.html", name, templates)[m
[32m+[m	[32mif err != nil {[m
[32m+[m		[32mreturn nil, err[m
[32m+[m	[32m}[m
[32m+[m
[32m+[m	[32mreturn finalTmpl, nil[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunc loadTemplateFiles(dir string) (map[string]string, error) {[m
[32m+[m	[32mtemplates := make(map[string]string)[m
[32m+[m	[32merr := filepath.Walk(dir, func(path string, info fs.FileInfo, err error) error {[m
[32m+[m		[32mif err != nil {[m
[32m+[m			[32mreturn err[m
[32m+[m		[32m}[m
[32m+[m		[32mif !info.IsDir() && strings.HasSuffix(info.Name(), ".html") {[m
[32m+[m			[32mcontent, err := ioutil.ReadFile(path)[m
[32m+[m			[32mif err != nil {[m
[32m+[m				[32mreturn err[m
[32m+[m			[32m}[m
[32m+[m			[32mrelPath, _ := filepath.Rel(dir, path)[m
[32m+[m			[32mtemplates[relPath] = string(content)[m
[32m+[m		[32m}[m
[32m+[m		[32mreturn nil[m
[32m+[m	[32m})[m
[32m+[m	[32mreturn templates, err[m
[32m+[m[32m}[m
\ No newline at end of file[m
